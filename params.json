{"name":"Checkers Tutor","tagline":"An Interactive Search-Based Approach","body":"Look at the checkers board below.  Which piece would you move?  A, B, or C?\r\n\r\n<img src=http://i.imgur.com/X0JDqGs.png>\r\n\r\nThere's a move you can make from this position that will win you the game.  In order to spot it, though, you need to look eight moves ahead.  It is rare to find a player who looks that far ahead.  However, with practice, a player can drastically improve their skill by learning to look further ahead.  Checkers Tutor can help.\r\n\r\n## Checkers Tutor\r\nThe Checkers Tutor has two purposes.  First is to be a challenging but beatable opponent for checkers players of any level, from novice to expert.  Second is to help players get better.\r\n\r\n### Checkers Tutor as an opponent\r\nCheckers Tutor runs a min-max algorithm coupled with iterative deepening.  This means it starts by looking one move ahead to find the best move, then two moves ahead, and so on.  Over the course of several games, by watching a player's moves, it can determine how far ahead they are looking.  When selecting its own moves, it will match the player's look-ahead, thus becoming a challenge for the player.  But if the player can stretch themselves, they can beat the computer.  The computer never stops examining the player, so as the player steadily improves, the computer will improve itself alongside the player.\r\n\r\n### Checkers Tutor as a teacher\r\nAs an opponent, Checkers Tutor has determined how far ahead the player is looking.  When tutor mode is turned on, it will use its knowledge of the player to help the player improve.  It will do this by finding moments in the game where players could make a better move by looking just one move further ahead. When these teaching moments are found, it will recommend that the player take some more time and examine the game more carefully.  The player then has the chance to make the better move.  \r\n\r\n### Method\r\nAs previously mentioned, Checkers Tutor uses a min-max algorithm with iterative deepening to determine the best move when looking an increasing number of moves ahead.  However, this can consume too much time.  In fact after only looking five moves ahead, the slowdown becomes untenable.  To overcome this, Checkers Tutor implements alpha-beta pruning to drastically cut down the number of potential moves it must examine.  This makes looking further ahead feasible.   \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}